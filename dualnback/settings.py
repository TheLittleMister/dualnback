"""
Django settings for dualnback project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

from django.core.management.utils import get_random_secret_key
from pathlib import Path
import os
import json

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

if not DEBUG:
    with open("/etc/config.json") as config_file:
        config = json.load(config_file)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_random_secret_key() if DEBUG else config.get('SECRET_KEY')

ALLOWED_HOSTS = ['127.0.0.1', 'localhost'] if DEBUG else config.get(
    'ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'users',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_cleanup.apps.CleanupConfig'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dualnback.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dualnback.wsgi.application'
AUTH_USER_MODEL = "users.User"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }

else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": config.get("DBNAME"),
            "USER": config.get("DBUSER"),
            "PASSWORD": config.get("DBPASSWORD"),
            "HOST": "localhost",
            "PORT": "",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static/")
STATICFILES_DIRS = [os.path.join(BASE_DIR, "templates/static/")]

# SESSION
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 7200  # SECONDS
SESSION_SAVE_EVERY_REQUEST = True


# AUTHENTICATION (LOGIN)
AUTHENTICATION_BACKENDS = ('users.backends.AuthBackend',)

# AUTO FIELD (DJANGO >= 3.2)
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# LOGIN URL
LOGIN_URL = '/'

# Google reCAPTCHA
GOOGLE_RECAPTCHA_SECRET_KEY = '_' if DEBUG else config.get("RECAPTCHA_SECRET")
GOOGLE_RECAPTCHA_SITE_KEY = '_' if DEBUG else config.get("RECAPTCHA_SITE")

# EMAIL STMP

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "_" if DEBUG else config.get("EMAIL_HOST")
EMAIL_PORT = 587
EMAIL_HOST_USER = "_" if DEBUG else config.get("EMAIL_USER")
EMAIL_HOST_PASSWORD = "_" if DEBUG else config.get("EMAIL_PASS")
EMAIL_USE_TLS = True
SERVER_EMAIL = "_" if DEBUG else config.get("EMAIL_USER")
DEFAULT_FROM_EMAIL = "_" if DEBUG else config.get("EMAIL_USER")

# CSRF
"""
    CSRF is required to make a POST, it is NOT invalid until the data is POSTED.
    When a CSRF token is used and the data is POSTED, all CSRF tokens are no longer valid.
    When a new CSRF token is generated, all the others remain valid.
"""
CSRF_COOKIE_SECURE = False if DEBUG else True
